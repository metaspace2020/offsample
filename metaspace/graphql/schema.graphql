type Person {
  name: String!
  surname: String!
  email: String!
}

enum PersonRole {
  SUBMITTER,
  PI
}

enum Polarity {
  POSITIVE
  NEGATIVE
}

type Analyzer {
  type: String!
  resolvingPower(mz: Float!): Float!
}

enum AnnotationOrderBy {
  ORDER_BY_MZ
  ORDER_BY_MSM
  ORDER_BY_FDR_MSM
  ORDER_BY_DATASET
  ORDER_BY_FORMULA
}

enum DatasetOrderBy {
  ORDER_BY_DATE
  ORDER_BY_NAME
}

enum SortingOrder {
  ASCENDING,
  DESCENDING
}

enum JobStatus {
  QUEUED,
  ANNOTATING,
  INDEXING,
  FINISHED,
  FAILED
}

type FdrCounts {
  dbName: String!
  levels: [Float!]!
  counts: [Float!]!
}

type Dataset {
  id: String!
  name: String!

  institution: String!
  submitter: Person!
  principalInvestigator: Person

  polarity: Polarity!
  ionisationSource: String!
  analyzer: Analyzer!

  organism: String
  organismPart: String
  condition: String
  growthConditions: String
  maldiMatrix: String

  configJson: String!
  # full metadata JSON conforming to schema published at
  # https://github.com/metaspace2020/metaspace/tree/master/metaspace/metadata
  metadataJson: String!
  isPublic: Boolean!
  molDBs: [String!]!
  adducts: [String!]!
  acquisitionGeometry: String
  metadataType: String!

  status: JobStatus
  inputPath: String
  uploadDateTime: String
  fdrCounts(inpFdrLvls: [Int!]!, checkLvl: Int!): FdrCounts
  opticalImage: String!
}

# fields of categorical type
enum DatasetAggField {
  DF_INSTITUTION,
  DF_SUBMITTER_FIRST_NAME,
  DF_SUBMITTER_SURNAME,
  DF_POLARITY,
  DF_ION_SOURCE,
  DF_ANALYZER_TYPE,
  DF_ORGANISM,
  DF_ORGANISM_PART,
  DF_CONDITION,
  DF_GROWTH_CONDITIONS,
  DF_MALDI_MATRIX
}

type CompoundInfoEntry {
  database: String!
  url: String
  databaseId: String!
}

type Compound {
  name: String!
  imageURL: String
  information: [CompoundInfoEntry]
  # TODO: InChi/SMILES, ClassyFire results
}

type Adduct {
  adduct: String!
  charge: Int!
}

type Spectrum {
  mzs: [Float!]!
  intensities: [Float!]!
}

type MzImage {
  mz: Float
  url: String
  totalIntensity: Float!
  minIntensity: Float!
  maxIntensity: Float!
}

type MolecularDatabase {
  id: Int!
  name: String!
  version: String!
  default: Boolean!
}

type Annotation {
  id: String!

  dataset: Dataset!
  sumFormula: String!
  adduct: String!
  mz: Float!
  possibleCompounds: [Compound!]!
  fdrLevel: Float!
  msmScore: Float!
  rhoSpatial: Float
  rhoSpectral: Float
  rhoChaos: Float
  isotopeImages: [MzImage!]!

  peakChartData: String  # JSON
}

# [min, max) interval
input NumericRange {
  min: Float!
  max: Float!
}

input AnnotationFilter {
  database: String
  datasetName: String
  mzFilter: NumericRange
  msmScoreFilter: NumericRange
  compoundQuery: String
  fdrLevel: Float
  sumFormula: String
  adduct: String
}

input PersonFilter {
  name: String!
  surname: String!
}

input DatasetFilter {
  # list of IDs separated by '|'
  ids: String

  # exact match
  institution: String

  # substring match
  name: String

  # exact match
  submitter: PersonFilter

  polarity: Polarity

  # exact match
  ionisationSource: String

  # exact match
  analyzerType: String

  # exact match
  maldiMatrix: String

  # exact match
  organism: String

  # exact match
  organismPart: String

  # exact match
  condition: String

  # exact match
  growthConditions: String

  # exact match
  metadataType: String

  status: JobStatus
}

input DatasetCountPerGroupInput {
  fields: [DatasetAggField!]!
  filter: DatasetFilter = {}
  simpleQuery: String
}

input DatasetCreateInput {
  name: String!
  inputPath: String!
  uploadDT: String
  isPublic: Boolean! = true
  molDBs: [String!]!
  adducts: [String!]!
  metadataJson: String!
}

input DatasetUpdateInput {
  name: String
  uploadDT: String
  metadataJson: String
  isPublic: Boolean = true
  molDBs: [String!]
  adducts: [String!]
}

type DatasetCountPerGroupListElement {
  fieldValues: [String!]!  # corresponding to input fields
  count: Int!
}

type DatasetCountPerGroup {
  counts: [DatasetCountPerGroupListElement]
}

type RawOpticalImage {
    url: String
    transform: [[Float]]
}

input AddOpticalImageInput {
  datasetId: String!
  imageUrl: String!

  # 3x3 transformation matrix in row-major order
  # (acting in homogeneous coordinates)
  transform: [[Float]]!
}

type Query {
  dataset(id: String!): Dataset
  datasetByName(name: String!): Dataset

  allDatasets(orderBy: DatasetOrderBy = ORDER_BY_DATE,
              sortingOrder: SortingOrder = DESCENDING,
              filter: DatasetFilter = {}, simpleQuery: String,
              offset: Int = 0, limit: Int = 10): [Dataset!]

  allAnnotations(orderBy: AnnotationOrderBy = ORDER_BY_MSM,
                 sortingOrder: SortingOrder = DESCENDING,
                 offset: Int = 0, limit: Int = 10,
                 filter: AnnotationFilter = {},
                 datasetFilter: DatasetFilter = {},
                 simpleQuery: String): [Annotation]

  countDatasets(filter: DatasetFilter = {}, simpleQuery: String): Int!

  countDatasetsPerGroup(query: DatasetCountPerGroupInput!): DatasetCountPerGroup!

  countAnnotations(filter: AnnotationFilter = {},
                   datasetFilter: DatasetFilter = {},
                   simpleQuery: String): Int!

  annotation(id: String!): Annotation

  metadataSuggestions(field: String!, query: String!, limit: Int = 10): [String!]!

  peopleSuggestions(role: PersonRole!, query: String!): [Person!]!

  molecularDatabases(hideDeprecated: Boolean = true): [MolecularDatabase!]

  adductSuggestions: [Adduct!]!

  opticalImageUrl(datasetId: String!, zoom: Float = 1): String

  rawOpticalImage(datasetId: String!): RawOpticalImage

  thumbnailImage(datasetId: String!): String,

  reprocessingNeeded(input: DatasetUpdateInput!): Boolean!
}

type Mutation {
  createDataset(id: String, input: DatasetCreateInput!,
        priority: Int=0): String!

  updateDataset(id: String!, input: DatasetUpdateInput!,
        reprocess: Boolean=false, delFirst: Boolean=false,
        force: Boolean=false, priority: Int=0): String!

  deleteDataset(id: String!,
        force: Boolean=false, priority: Int=0): String!

  # for dev purposes only
  reprocessDataset(id: String, priority: Int=0, delFirst: Boolean=false): String!

  addOpticalImage(input: AddOpticalImageInput!): String!

  deleteOpticalImage(datasetId: String!): String!
}

type DatasetStatusUpdate {
  dataset: Dataset
}

type Subscription {
  datasetStatusUpdated: DatasetStatusUpdate
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
