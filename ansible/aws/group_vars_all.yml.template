---

stage: STAGE_NAME  # prod/stage/dev

metaspace_repo_url: https://github.com/metaspace2020/metaspace
metaspace_branch: master
metaspace_home: /opt/dev/metaspace

# SOFTWARE CONFIGURATION

time_zone_name: UTC  # Ubuntu timezone name

aws_access_key_id: AWS_ACCESS_KEY_ID
aws_secret_access_key: AWS_SECRET_ACCESS_KEY
aws_key_name: AWS_KEY_NAME
aws_region: eu-west-1

notification_email: SM-ADMIN@EXAMPLE.COM

postgres_version: 9.5
postgres_port: 5432
postgres_drop_create: false

elasticsearch_version: 5.5.2

kibana_version: "{{ elasticsearch_version }}"
kibana_user: kibana
kibana_password: KIBANA_PASSWORD
kibana_es_port: 9200  # kibana runs on the same host and connects to ES directly

rabbitmq_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
rabbitmq_user: sm
rabbitmq_password: RABBITMQ_PASSWORD

miniconda_version: latest
miniconda_python: 3
miniconda_prefix: /opt/dev/miniconda3
miniconda_env:
  name: sm
  dependencies:
    - python=3.6
    - nomkl
    - numpy=1.11.2
    - scipy=0.18.1
    - matplotlib=2
    - pandas=0.22.0
    - cffi
    - libgcc
    - psycopg2=2.7.1
    - pip:
      - requests
      - py4j
      - pytest
      - recommonmark
      - boto3
      - fabric3
      - pypng
      - pyyaml
      - elasticsearch
      - elasticsearch_dsl
      - pika>=0.11.0b1
      - bottle
      - pysparkling
      - PyArrow>=0.8.0
      - Pillow==4.2.1
      - pyopenms==2.2.0

sm_postgres_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_postgres_password: POSTGRES_PASSWORD
sm_home: "{{ metaspace_home }}/metaspace/engine"
sm_s3_path: ENGINE_BUCKET_NAME  # bucket for sm engine tmp data in "s3a://bucket-name/tmp" form
sm_img_service_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}:4201"
sm_es_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}"
sm_es_port: 9210  # cannot be 9200 (nginx proxied)
sm_es_user: elastic
sm_es_password: ELASTIC_PASSWORD
sm_send_email: true
sm_create_schema: true  # set to false to avoid database dropping during provisioning
sm_create_es_index: true  # set to false to avoid Elasticsearch index dropping during provisioning
sm_isotope_storage_path: S3_ISOTOPE_STORAGE_PATH
sm_default_adducts:
  "+": ["+H", "+Na", "+K"]
  "-": ["-H", "+Cl"]

sm_cluster_autostart_python: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

mol_db_home: "{{ metaspace_home }}/metaspace/mol-db"
mol_db_url: "http://{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}/mol_db/v1"
mol_db_postgres_pass: POSTGRES_PASSWORD
mol_db_image_dir: /var/www/mol-images
mol_db_import_databases: true  # set to false to avoid dropping MolDB database
mol_db_import_mol_images: true  # set to false to avoid reimporting all molecular images
mol_db_image_archives:
  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-hmdb.tar.xz
# uncomment below for other databases
#  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-chebi.tar.xz
#  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-lipid-maps.tar.xz
#  - https://s3-eu-west-1.amazonaws.com/sm-mol-db/mol-images/mol-images-swiss-lipids.tar.xz
mol_db_imports:
  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_4.tsv"
    name: "HMDB-v4"
    version: "2018-03-08"
# uncomment below for other databases
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_2-5.tsv"
#    name: "HMDB-v2.5"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_4-endogenous.tsv"
#    name: "HMDB-v4-endogenous"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/hmdb/hmdb_2-5-cotton.tsv"
#    name: "HMDB-v4-cotton"
#    version: "2018-04-27"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/brachemdb/BraChemDB_2018-03_empty_inchi.tsv"
#    name: "BraChemDB-2018-01"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/chebi/chebi_2018-01.tsv"
#    name: "ChEBI-2018-01"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/lipidmaps/lipidmaps_2017-12-12.tsv"
#    name: "LipidMaps-2017-12-12"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/pamdb/pamdb_1-0.tsv"
#    name: "PAMDB-v1.0"
#    version: "2018-03-08"
#  - url: "https://s3-eu-west-1.amazonaws.com/sm-mol-db/db_files/swisslipids/swisslipids_2018-02-02"
#    name: "SwissLipids-2018-02-02"
#    version: "2018-03-08"

nodejs_version: 8.*

sm_graphql_hostname: "{{ hostvars['web-1'].ansible_ssh_host }}"  # specify manually in production
sm_graphql_home: "{{ metaspace_home }}/metaspace/graphql"
sm_graphql_slack_webhook_url: ""
sm_graphql_slack_channel: ""
sm_graphql_jwt_secret: JWT_SECRET
sm_graphql_public_url: "http://{{ sm_graphql_hostname }}/graphql"
sm_graphql_mol_image_host: "{{ sm_graphql_hostname }}"
sm_graphql_img_upload_host: "{{ hostvars['web-1'].ansible_ssh_host }}"
sm_graphql_moldb_service_host: "{{ hostvars['web-1'].ansible_ec2_local_ipv4 }}/mol_db"
sm_graphql_database_password: "{{ sm_postgres_password }}"
sm_graphql_rabbitmq_host: "{{ rabbitmq_host }}"
sm_graphql_rabbitmq_user: "{{ rabbitmq_user }}"
sm_graphql_rabbitmq_password: "{{ rabbitmq_password }}"
sm_graphql_ws_public_endpoint: "ws://{{ sm_graphql_hostname }}/ws"
sm_graphql_default_adducts: "{{ sm_default_adducts }}"
sm_graphql_img_storage_backend: fs

sm_webapp_hostname: "{{ hostvars['web-1'].ansible_ssh_host }}"  # specify manually for production
sm_webapp_url: "http://{{ sm_webapp_hostname }}"
sm_webapp_home: "{{ metaspace_home }}/metaspace/webapp"
sm_webapp_port: 8082
sm_webapp_cookie_secret: COOKIE_SECRET
sm_webapp_admin_emails:
  - admin@mail.de
# The region should satisfy the following requirements:
#  - AWS SES endpoints are available there
#  - AWS authentication protocol V2 is supported
sm_webapp_aws_region: WEBAPP_AWS_REGION
sm_webapp_aws_access_key_id: WEBAPP_AWS_ACCESS_KEY_ID
sm_webapp_aws_secret_access_key: WEBAPP_AWS_SECRET_ACCESS_KEY
sm_webapp_s3_bucket: BUCKET-NAME-UPLOAD  # just plain bucket name
sm_webapp_google_client_id: ""
sm_webapp_google_client_secret: ""
sm_webapp_google_callback_url: "http://{{ sm_webapp_hostname }}/auth/google/callback"
sm_webapp_sentry_dsn: ""
sm_webapp_upload_destination: s3
sm_webapp_jwt_secret: "{{ sm_graphql_jwt_secret }}"
sm_webapp_redis_host: localhost
sm_webapp_redis_port: 6379
sm_webapp_enable_uploads: true
# metadata types are specified by corresponding filenames in metaspace2020/metadata repository
# "specialised metadata" subfolder
sm_webapp_metadata_types: ["ims"]  # set ["ims", "lcms"] to accept both IMS and LC-MS datasets

sm_ansible_home: "{{ metaspace_home }}/ansible"

sm_activate_venv: source {{ miniconda_prefix }}/bin/activate {{ miniconda_env.name }}

spark_key_file: ~/.ssh/ubuntu_spark
spark_version: "2.3.0-bin-hadoop2.7"
spark_mirror: "https://s3-eu-west-1.amazonaws.com/sm-engine/dev"
spark_home: "/usr/lib/spark"
spark_user: "ubuntu"

elk_enable: false  # set "true" to enable logs aggregation in ELK

spark_env_extras_slave:
  SPARK_WORKER_DIR: "/tmp/spark"
  SPARK_LOCAL_DIRS: "/tmp/spark"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

spark_env_extras_master:
  AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
  AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
  PYSPARK_PYTHON: "{{ miniconda_prefix }}/envs/{{ miniconda_env.name }}/bin/python"

slack_channel:
slack_webhook_url:

nginx_upstream_hosts:
  - name: web_server
    server: 127.0.0.1:{{ sm_webapp_port }}
  - name: mol_image_server
    server: 127.0.0.1:3020
  - name: isotope_image_server
    server: 127.0.0.1:4201
  - name: graphql_server
    server: 127.0.0.1:3010
  - name: graphql_ws_server
    server: 127.0.0.1:5666
  - name: moldb_server
    server: 127.0.0.1:5001
  - name: kibana_server
    server: 127.0.0.1:5601
  - name: elasticsearch_server
    server: 127.0.0.1:9200

nginx_servers:
  - desc: Kibana redirect
    params:
      - listen 8080;
    locations:
      - path: /
        params:
          - auth_basic "Private Property";
          - auth_basic_user_file /etc/nginx/passwdfile;
          - proxy_pass http://kibana_server;
          - include proxy-params.conf;

  - desc: Endpoint for Web App, GraphQL, GraphQL WebSocket, ion images, mol images, and MolDB
    params:
      - server_name {{ sm_webapp_hostname }};
      - listen 80;
      - proxy_read_timeout 300;
      - send_timeout 300;
    locations:
      - path: /mol-images/
        params:
          - root /var/www;
      - path: /
        params:
          - proxy_pass http://web_server;
          - client_max_body_size 5M;
      - path: /fs/iso_images/
        params:
          - proxy_pass http://isotope_image_server/fs/iso_images/;
          - limit_except GET {deny all;}
      - path: /db/iso_images/
        params:
          - proxy_pass http://isotope_image_server/db/iso_images/;
          - limit_except GET {deny all;}
      - path: /fs/optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/optical_images/;
          - limit_except GET {deny all;}
      - path: /fs/raw_optical_images/
        params:
          - proxy_pass http://isotope_image_server/fs/raw_optical_images/;
          - client_max_body_size 25M;
      - path: /graphql
        params:
          - proxy_pass http://graphql_server/graphql;
          - include proxy-params.conf;
      - path: /graphiql
        params:
          - proxy_pass http://graphql_server/graphiql;
          - include proxy-params.conf;
      - path: /ws
        params:
          - proxy_pass http://graphql_ws_server/graphql;
          - proxy_http_version 1.1;
          - proxy_set_header Upgrade $http_upgrade;
          - proxy_set_header Connection "upgrade";
          - include proxy-params.conf;
      - path: /mol_db/
        params:
          - proxy_pass http://moldb_server/;
          - include proxy-params.conf;

  - desc: Elasticsearch redirect
    params:
      - listen {{ sm_es_port }};
    locations:
      - path: /
        params:
        - auth_basic "Private Property";
        - auth_basic_user_file /etc/nginx/passwdfile;
        - proxy_pass http://elasticsearch_server;
        - include proxy-params.conf;

basic_auth_users:
  - user: "{{ sm_es_user }}"
    password: "{{ sm_es_password }}"
  - user: "{{ kibana_user }}"
    password: "{{ kibana_password }}"

# VIRTUAL MACHINES CONFIGURATION
# no ansible vars are allowed below, used by python scripts

cluster_configuration:
  instances:
    web:
      hostgroup: WEB_HOSTGROUP  # specify a custom name for the group of hosts
      type: r4.large
      n: 1
      elipalloc:  # create manually in AWS console and put the id here to use static IP address
      price:  # put price to use spot instances
      sec_group: default  # update for better security
      image: ami-07174474  # public ubuntu 16.04 at eu-west-1
                           # ami-4d6c0e22 is for eu-central-1
      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            DeleteOnTermination: True
            VolumeType: gp2

    master:
      hostgroup: MASTER_HOSTGROUP  # specify a custom name for the group of hosts
      type: c4.xlarge
      n: 1
      elipalloc:
      price: 0.6
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04, create custom AMI and put its id here

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 500
            DeleteOnTermination: True
            VolumeType: gp2

    slave:
      hostgroup: SLAVE_HOSTGROUP  # specify a custom name for the group of hosts
      type: c4.2xlarge
      n: 1
      elipalloc:
      price: 0.6
      sec_group: default
      image: ami-07174474  # public ubuntu 16.04, create custom AMI and put its id here

      block_dev_maps:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 1000
            DeleteOnTermination: True
            VolumeType: gp2
# uncomment below if you want to use Elasticsearch for logs aggregation
#    elk:
#      hostgroup: elk
#      sec_group: elk
