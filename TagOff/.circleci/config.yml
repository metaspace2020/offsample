version: 2
jobs:
  # TODO: Monorepo support - only run tests on projects if they have changed
  # e.g. https://discuss.circleci.com/t/does-circleci-2-0-work-with-monorepos/10378/14

  test-webapp:
    docker:
      - image: intsco/sm-webapp:0.9

      - image: postgres:9.5-alpine
        environment:
          POSTGRES_USER: sm
          POSTGRES_PASSWORD: password

      - image: elasticsearch:5.4.0-alpine
        environment:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        command: [elasticsearch, -Etransport.host=127.0.0.1]

      - image: redis:3.2-alpine

      - image: rabbitmq:3.6-alpine
        environment:
          RABBITMQ_DEFAULT_USER: sm
          RABBITMQ_DEFAULT_PASS: password

    working_directory: ~/metaspace/metaspace/webapp
    steps:
      - checkout:
          path: ~/metaspace
      - restore_cache:
          keys:
            - yarn-cache-{{checksum "yarn.lock"}}-{{checksum "../graphql/yarn.lock"}}
            - yarn-cache
      - run:
          name: Install npm packages
          command: |
            yarn install
            npm rebuild node-sass  # https://github.com/sass/node-sass/issues/1804
            cd ../graphql
            yarn install
      - save_cache:
          key: yarn-cache-{{checksum "yarn.lock"}}-{{checksum "../graphql/yarn.lock"}}
          paths:
            - /usr/local/share/.cache/yarn
      - run:
          name: Build webapp
          command: |
            cp tests/e2e/conf.js conf.js
            cp tests/e2e/clientConfig.json src/
            yarn run build-ci
      - run:
          name: Start GraphQL server and service mocks
          command: |
            export NPM_CONFIG_LOGLEVEL=warn
            cd ../graphql
            node deref_schema.js > metadata_schema.json
            cp tests/mock_config.js config/default.js
            forever start -e api_mocks.err.log tests/api_mocks.js
            forever start -o sm-graphql.out.log -e sm-graphql.err.log server.js
      - run:
          name: Load test data into the database and ElasticSearch
          command: |
            cd ci
            bash populate_pg_es.sh
      - run:
          name: Run tests
          command: |
            export NPM_CONFIG_LOGLEVEL=warn
            #while true; do echo '---'; sleep 5; done   # uncomment this line for debugging
            stty cols 80  # https://github.com/DevExpress/testcafe/issues/1469
            yarn run test

  test-engine:
    docker:
      # includes:
      #   - miniconda with all packages required for sm-engine
      #   - pyspark installation
      - image: intsco/sm-engine:0.11

      - image: postgres:9.5-alpine
        environment:
          POSTGRES_USER: sm
          POSTGRES_PASSWORD: password

      - image: elasticsearch:5.4.0-alpine
        environment:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        command: [elasticsearch, -Etransport.host=127.0.0.1]

      - image: rabbitmq:3.6-management
        environment:
          RABBITMQ_DEFAULT_USER: sm
          RABBITMQ_DEFAULT_PASS: password

    working_directory: ~/metaspace/metaspace/engine
    steps:
      - checkout:
          path: ~/metaspace
      - run:
          name: Setup configuration files
          command: |
            cp docker/sci_test_config.json conf/config.json
            mkdir -p logs
            echo 'localhost:5432:sm:password\n' > ~/.pgpass
            chmod 0600 ~/.pgpass
      - run:
          name: Run unit and integration tests
          command: |
            source docker/env.sh
            pip install -U pip
            #while true; do echo '---'; sleep 5; done   # uncomment this line for debugging
            coverage run --source=./sm/engine --omit=./sm/engine/tests/*,./tests/* -m py.test sm/engine/tests tests
      - run:
          name: Upload test coverage
          command: |
            source docker/env.sh
            #while true; do echo '---'; sleep 5; done   # uncomment this line for debugging
            codecov

  test-engine-sci:
    docker:
      # includes:
      #   - miniconda with all packages required for sm-engine
      #   - pyspark installation
      - image: intsco/sm-engine:0.11

      - image: postgres:9.5-alpine
        environment:
          POSTGRES_USER: sm
          POSTGRES_PASSWORD: password

      - image: elasticsearch:5.4.0-alpine
        environment:
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        command: [elasticsearch, -Etransport.host=127.0.0.1]

      - image: rabbitmq:3.6-management
        environment:
          RABBITMQ_DEFAULT_USER: sm
          RABBITMQ_DEFAULT_PASS: password

    working_directory: ~/metaspace/metaspace/engine
    steps:
      - checkout:
          path: ~/metaspace
      - run:
          name: Setup configuration files
          command: |
            cp docker/sci_test_config.json conf/config.json
            mkdir -p logs
            echo 'localhost:5432:sm:password\n' > ~/.pgpass
            chmod 0600 ~/.pgpass
      - run:
          name: Download and unpack isotope centroids
          command: |
            wget https://s3-eu-west-1.amazonaws.com/embl-sm-testing/dumps/2018-03-13/HMDB-v2.5.tar.gz
            mkdir -p /tmp/isotope_storage
            tar -xvf HMDB-v2.5.tar.gz -C /tmp/isotope_storage
      - run:
          name: Create and prefill the databases
          command: |
            createdb -h localhost -U postgres sm_test
            psql -U sm -h localhost -d sm_test < scripts/create_schema.sql
            wget -qN https://s3-eu-west-1.amazonaws.com/embl-sm-testing/dumps/2018-03-13/mol_db.dump
            pg_restore -U sm -h localhost --no-owner --role=sm -d sm_test mol_db.dump
            cp docker/mol_db_conf.ini ../mol-db/conf/local.ini
      - run:
          name: Run mol db
          background: true
          command: |
            cd ../mol-db
            source activate mol-db
            python app/main.py
      - run:
          name: Run scientific test
          command: |
            source docker/env.sh
            python tests/sci_test_spheroid.py -r --mock-img-store

workflows:
  version: 2
  commit:
    jobs:
      - test-engine
  daily:
    jobs:
      - test-webapp
    triggers:
      - schedule:
          cron: "0 11 * * 1-5"
          filters:
            branches:
              only:
                - master
                - feature/.*
  weekly:
    jobs:
      - test-engine-sci
    triggers:
      - schedule:
          cron: "0 11 * * 1"
          filters:
            branches:
              only:
                - master

